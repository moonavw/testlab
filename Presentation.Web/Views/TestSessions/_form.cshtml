@model TestSession

@{
    IEnumerable<TestAgent> agents = ViewBag.Agents;
}

<p><a href="javascript:history.back()" class="btn btn-default">Cancel</a></p>

@Html.AntiForgeryToken()
@Html.ValidationSummary(true)

<div class="form-horizontal">
    <fieldset>
        <legend>Test Session</legend>

        <div class="form-group@(Html.ValidationErrorFor(z=>z.TestPlanId, " has-error"))">
            @Html.LabelFor(z=>z.TestPlanId, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(z=>z.TestPlanId, new SelectList(Model.Project.Plans.Actives(), "Id", "Name", Model.Plan == null ? 0 : Model.Plan.Id), new {@class = "form-control selectpicker",data_live_search="true"})
                @Html.ValidationMessageFor(z=>z.TestPlanId, null, new {@class = "help-block"})
            </div>
        </div>
        <div class="form-group@(Html.ValidationErrorFor(z=>z.TestBuildId, " has-error"))">
            @Html.LabelFor(z=>z.TestBuildId, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(z=>z.TestBuildId, new SelectList(Model.Project.Builds.Where(z => z.Completed != null).OrderByDescending(z => z.Id), "Id", "Name", Model.Build == null ? 0 : Model.Build.Id), new { @class = "form-control selectpicker", data_live_search = "true" })
                @Html.ValidationMessageFor(z=>z.TestBuildId, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group@(Html.ValidationError("TestAgents", " has-error"))">
            @Html.Label("TestAgents", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBox("TestAgents", new MultiSelectList(agents, "Id", "Name", Model.Queues.Select(z => z.Agent.Id)), new { @class = "form-control selectpicker", data_live_search = "true" })
                @Html.ValidationMessage("TestAgents", null, new { @class = "help-block" })
            </div>
        </div>
        <fieldset>
            <legend>Test Config</legend>
            <div class="form-group@(Html.ValidationErrorFor(m => m.Config.Type, " has-error"))">
                @Html.LabelFor(m => m.Config.Type, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(m => m.Config.Type, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Config.Type, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="form-group@(Html.ValidationErrorFor(m => m.Config.Value, " has-error"))">
                @Html.LabelFor(m => m.Config.Value, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(m => m.Config.Value, 5, 80, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Config.Value, null, new { @class = "help-block" })
                </div>
            </div>
        </fieldset>
    </fieldset>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-primary" />
            <input type="reset" value="Reset" class="btn btn-default"/>
        </div>
    </div>
</div>
