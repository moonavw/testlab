@model TestLab.Domain.TestSession


@Html.AntiForgeryToken()
@Html.ValidationSummary(true)

<div class="form-horizontal">
    <fieldset>
        <legend>Test Session</legend>
        <div class="form-group@(Html.ValidationErrorFor(m => m.Name, " has-error"))">
            @Html.LabelFor(m => m.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Name, null, new { @class = "help-block" })
            </div>
        </div>
        @if (Model.Id == 0)
        {
            <div class="form-group@(Html.ValidationError("TestPlanId", " has-error"))">
                @Html.Label("TestPlanId", new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.DropDownList("TestPlanId", new SelectList(Model.Project.Plans, "Id", "Name"), new {@class = "form-control selectpicker",data_live_search="true"})
                    @Html.ValidationMessage("TestPlanId", null, new {@class = "help-block"})
                </div>
            </div>
        }
    </fieldset>
    
    <fieldset>
        <legend>Build</legend>
        <div class="form-group@(Html.ValidationErrorFor(m => m.Build.Name, " has-error"))">
            @Html.LabelFor(m => m.Build.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Build.Name, new { @class = "form-control", @readonly=true })
                @Html.ValidationMessageFor(m => m.Build.Name, null, new { @class = "help-block" })
            </div>
        </div>
        @Html.HiddenFor(m => m.Build.Started)
        @Html.HiddenFor(m => m.Build.Completed)
    </fieldset>
    
    <fieldset>
        <legend>Agent</legend>
        <div class="form-group@(Html.ValidationErrorFor(m => m.Agent.Server, " has-error"))">
            @Html.LabelFor(m => m.Agent.Server, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Agent.Server, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Agent.Server, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group@(Html.ValidationErrorFor(m => m.Agent.Domain, " has-error"))">
            @Html.LabelFor(m => m.Agent.Domain, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Agent.Domain, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Agent.Domain, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group@(Html.ValidationErrorFor(m => m.Agent.UserName, " has-error"))">
            @Html.LabelFor(m => m.Agent.UserName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Agent.UserName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Agent.UserName, null, new { @class = "help-block" })
            </div>
        </div>
        <div class="form-group@(Html.ValidationErrorFor(m => m.Agent.Password, " has-error"))">
            @Html.LabelFor(m => m.Agent.Password, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Agent.Password, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Agent.Password, null, new { @class = "help-block" })
            </div>
        </div>
    </fieldset>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-primary" />
            <input type="reset" value="Reset" class="btn btn-default"/>
        </div>
    </div>
</div>
